{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","monsters","map","SearchBox","onSearchChange","type","placeholder","onChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAiCeA,EA3BF,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACX,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAQI,GAAlC,4BAEL,+BACG,IACAJ,EAAQK,KACR,OAEH,8BACG,IACAL,EAAQM,MACR,WCIQC,G,MAhBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACf,qBAAKP,UAAU,YAAf,SACGO,EAASC,KAAI,SAAAT,GAAO,OACnB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,WCQVM,G,MAbG,SAAC,GAAD,IAAGC,EAAH,EAAGA,eAAH,OAChB,uBACEV,UAAU,aACVW,KAAK,SACLC,YAAY,kBACZC,SAAUH,MC+BCI,G,wDAlCb,aAAe,IAAD,8BACZ,gBAaFJ,eAAiB,SAAAK,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO7C,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA7B,GAAO,OAAIA,EAAQK,KAAKyB,cAAcC,SAC7Eb,EAAYY,kBAGd,OACE,sBAAK7B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWU,eAAgBgB,KAAKhB,iBAChC,cAAC,EAAD,CAAUH,SAAUoB,W,GA7BVI,cCOHC,EAdS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAEnB,IADLa,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1c3fbcc4.chunk.js","sourcesContent":["import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport './card.styles.css';\n\nconst Card = ({ monster }) => (\n  <div className=\"card-container\">\n    <img\n      alt=\"monster\"\n      src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\n    />\n    <h2>\n      {' '}\n      {monster.name}\n      {' '}\n    </h2>\n    <p>\n      {' '}\n      {monster.email}\n      {' '}\n    </p>\n  </div>\n);\n\nCard.propTypes = {\n  monster: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    email: PropTypes.string,\n  }).isRequired,\n};\n\nexport default Card;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Card from '../card/card.component';\n\nimport './card-list.styles.css';\n\nconst CardList = ({ monsters }) => (\n  <div className=\"card-list\">\n    {monsters.map(monster => (\n      <Card key={monster.id} monster={monster} />\n    ))}\n  </div>\n);\n\nCardList.propTypes = {\n  monsters: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n    }),\n  ).isRequired,\n};\n\nexport default CardList;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport './search-box.styles.css';\n\nconst SearchBox = ({ onSearchChange }) => (\n  <input\n    className=\"search-box\"\n    type=\"search\"\n    placeholder=\"search monsters\"\n    onChange={onSearchChange}\n  />\n);\n\nSearchBox.propTypes = {\n  onSearchChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBox;\n","import React, { Component } from 'react';\n\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(\n      searchField.toLowerCase(),\n    ));\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox onSearchChange={this.onSearchChange} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}